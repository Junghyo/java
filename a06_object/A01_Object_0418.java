/*
 # 생각해봅시다
 1) 객체지향프로그램이 어떤 면에서 효율적인가?
 2) 객체에서 속성과 메서드는 상호간의 어떤 작용을 할까? 
 3) 객체 VS 객체는 어떤 프로그램에서 활용될 것인가?
 4) 객체 간의 접근제어는 왜 발생하는가?
 
 # 객체지향 프로그램
 1) 현실세계
 사람
 메모리 : 이름, 나이
 동작: 웃다, 보다
 
 2) 자바
 사람객체
 전역변수 : 이름, 나이
 메서드 : 웃다, 보다
 
 1. 객체란?
 - 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성이 있고 다른 것과 식하는 것을 말한다.
 
 2. 객체 모델링
 - 현실 세계나 추상적인 내용의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메서드로 정의해 나가는 과정	
 
 3. 객체의 상호작용
 - 사람 <--상호작용--> 계산기(물건)
 - 메서드 호출. 결과를 리턴.
 ex) int calcu = Calcu.add(10, 20);
 	 add()메서드에 return결과값으로 합산된 내용을 받음.
 
 
 # 객체 지향 프로그램의 특징
 1. 캡슐화(Encapsulation)
 - 객체가 포함한 속성과 메서드는 객체간의 관계에 있어서 감추거나
   권한에 따라 접근이 가능하게 처리하는 것을 말한다. 여기서 사용되는 keyword로
   접근제어자가 있다.
 
 2. 상속(Inheritance)
 - 상속이란 일반저긍로 재산을 부모가 자식에게 물려주는 뜻처럼
   자바에서는 부모가 가지고 있는 클래스의 속성과 메서드를 활용할 수 있는
   개념으로부터 시작한다. 
 
 3. 다형성(Polymorphism)
 - 같은 type이지만 기능적으로 여러 다양한 객체를 이용할 수 있는 성질을 말한다.
   프로그래밍 입장에서 상속받는 여러 객체를 대입함으로 다양한 기능을 이용할 수 있다.
   
   
 # 객체와 클래스
 1. 건물을 만들 경우
 - 설계
 - 현실성 있는 구현
 
 2. 클래스 = 설계
    만들어진 건물 = 객체
 
 3. 자바프로그래밍 단계
 - public class Person{}(코드) 		Person.java   
   main() 메서드가 있는 클래스에서 실행하였을 때
   Person p = new Person(); 		객체로 실제 처리할 수 있게 구체화 된다.]
 
 
 # 클래스 선언
 1. 문자열로 만들어지고 변수선언 규칙과 유사
 - 첫번째 글자는 숫자가 올 수 없다.
 - $, _외의 특수 문자를 사용할 수 없다.
 - 자바 내장 키워드 사용 불가.
 
 2. 파일명.java -> public class 클래스명
 - 파일 안에는 여러 클래스명을 선언할 수 있지만 public이 붙은 클래스명은 하나만 사용이 가능하다.
 - public이 붙은 클래스명이 파일명으로 사용된다.
 - 클래스명은 일반저긍로 첫자를 대문자로 시작한다.( public class Person{} )	 
 
 3. 모든 객체는 main()메서드가 포함된 클래스에서 객체로 호출해야 실행이 가능하다.
 
*/
package a06_object;
/* 클래스 선언 규칙
 1. A01_Object.java로 public class A01_Object로
 	일반적으로 파일명과 public으로 선언한 클래스명은 동일하게 한다.

 2. public class 클래스명은 하나의 파일에 하나만 선언할 수 있다.
 
 3. main()메서드가 있는 클래스에서 main()부분은 외부클래스가 선언된 것도
 	접근제어자가 허용하는 범위 안에서 수행이 가능하다.
 
 4. main()메서드가 없으면 클래스는 실행할 수 없다. compile만 가능
 
 5. class명은 일반적으로 첫자를 대문자로 시작한다
*/
// public class Person{} 에러 발생 이미 public class가 있기 때문
class Person{}
class Project_1 {}
// class는 얼마든지 선언이 가능하다
public class A01_Object_0418 {

}
